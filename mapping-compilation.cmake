# Base pour compilation

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if (CMAKE_HOST_WIN32)
	
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DHAVE_STRUCT_TIMESPEC /DYAML_CPP_BUILD_TESTS=OFF /DNOMINMAX /DWIN32 /DMSWIN32 /DWIN32_LEAN_AND_MEAN /D_GDI32_ /DUNALIGNED_OK /DWINVER=0x0601 /D_WIN32_WINNT=0x0601 /DUNIX /DUSE_OPEN_SSL /DHAVE_IOCTLSOCKET /D_WINDOWS /W3 /GR /EHsc")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS}     /DNOMINMAX /DWIN32 /DMSWIN32 /DWIN32_LEAN_AND_MEAN /D_GDI32_ /DUNALIGNED_OK /DWINVER=0x0601 /D_WIN32_WINNT=0x0601 /DUNIX /DUSE_OPEN_SSL /DHAVE_IOCTLSOCKET /D_WINDOWS /W3 /GR /EHsc /OPT:REF")
	
	# UNICODE
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DUNICODE /D_UNICODE /DMYUNICODE ")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS}     /DUNICODE /D_UNICODE /DMYUNICODE ")
	
elseif (CMAKE_HOST_UNIX)

    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -DYAML_CPP_BUILD_TESTS=OFF -DUNIX -DLINUX -DHAVE_STDINT_H -pthread -m64 -Wno-narrowing -lpthread -lm -ldl")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUNIX -DLINUX -DHAVE_STDINT_H -pthread -m64 -Wno-narrowing")
	
	# UNICODE
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUNICODE -D_UNICODE -DMYUNICODE ")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS}     -DUNICODE -D_UNICODE -DMYUNICODE ")
	
    set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -g")
    set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG")
	

    #extension
    set (EXT "")

endif()


include_directories(${MAPPING_SRC_ROOT_PATH})

## add an extension to the binaries on debug
set(CMAKE_DEBUG_POSTFIX d)

# For Microsoft compilers
if (MSVC)
    #removes strncpy warnings globally
    add_compile_options(/D_CRT_SECURE_NO_WARNINGS)
endif()